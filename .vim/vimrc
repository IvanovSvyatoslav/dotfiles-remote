" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

" Write viminfo to .cache/vim
set viminfo+=n~/.cache/vim/viminfo
let g:netrw_home=$XDG_CACHE_HOME.'/vim'

" Turn on syntax highlighting
syntax on

" Do not save backup files.
"
set nobackup

" Sync clipboard
set clipboard=unnamedplus

" For plugins to load correctly
filetype plugin indent on

nnoremap <SPACE> <Nop>
let mapleader = " "

" Security
set modelines=0

" Show line numbers
set number relativenumber
set nu rnu

" Show file stats
set ruler

" Enable mouse
set mouse=a

" Encoding
set encoding=utf-8

" Whitespace
set nowrap
set formatoptions=tcqrn1
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set noshiftround

" Cursor motion
set scrolloff=10
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

inoremap <nowait> jj <esc>

" Enable auto completion menu after pressing TAB
set wildmenu
"" Make wildmenu behave like similar to Bash completion
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim
" Wildmenu will ignore files with these extensions
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" Move faster
nnoremap H ^
nnoremap L $

" Cursor highlight
set ttimeoutlen=10
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" make cursor block in normal mode
" reset the cursor on start (for older versions of vim, usually not required)
augroup myCmds
    au!
    autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" Searching
nnoremap / /\v
vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch

map <leader><space> :nohl<CR>

" Yank from cursor to the end of line
nnoremap Y y$

" Center the cursor vertically when moving to the next word during a search
nnoremap n nzz
nnoremap N Nzz

" Center the cursor vertically when moving up and down half-page
nnoremap <c-u> <c-u>zz
nnoremap <c-d> <c-d>zz

" You can split the window in Vim by typing :split or :vsplit.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or
" CTRL+l.
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Resize split windows using arrow keys by pressing:
noremap <Leader><Up> 3<c-w>+
noremap <Leader><Down> 3<c-w>-
noremap <Leader><Left> 3<c-w>>
noremap <Leader><Right> 3<c-w><

" Formatting
map <leader>q gqip

" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
" Uncomment this to enable by default:
" set list " To enable by default
" Or use your leader key + l to toggle on/off
map <leader><leader>l :set list!<CR> " Toggle tabs and EO
if &term =~ '256color'
    " Enable true (24-bit) colors instead of (8-bit) 256 colors.
    "   " :h true-color
    if has('termguicolors')
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif
    colorscheme catppuccin_mocha
endif

" If the current file type is HTML, set indentation to 2 spaces.
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab

" You can split a window into sections by typing `:split` or`:vsplit`.
" Display cursorline and cursorcolumn ONLY in active window.
augroup cursor_off 
    autocmd!  
    autocmd WinLeave * set nocursorline nocursorcolumn 
    autocmd WinEnter * set cursorline cursorcolumn 
augroup END


" airline
let g:airline_powerline_fonts = 1 " Enable powerline fonts
let g:airline_section_z = "\ue0a1:%l/%L Col:%c" " Custom cursor location section
let g:Powerline_symbols='unicode' " Unicode support                                                                      █
let g:airline_theme='onedark'  

" highlighted yank
let g:highlightedyank_highlight_duration = 500

" easy motion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
map <Leader> <Plug>(easymotion-prefix)

" <Leader>f{char} to move to {char}
map  f <Plug>(easymotion-f)
map  F <Plug>(easymotion-F)

" Same for t
map  t <Plug>(easymotion-t)
map  T <Plug>(easymotion-T)

" s{char}{char} to move to {char}{char}
map z <Plug>(easymotion-f2)
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Search config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
